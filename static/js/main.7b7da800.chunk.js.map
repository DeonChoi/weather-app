{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","showWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","App","getWeather","e","a","preventDefault","target","elements","value","fetch","apiCall","json","response","console","log","setState","main","temp","toFixed","sys","weather","state","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAeeA,G,uLAVP,OACI,6BACI,wBAAIC,UAAU,aAAd,eACA,uBAAGA,UAAU,eAAb,uC,GANKC,IAAMC,YCcZC,E,iLAXP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YAAaP,UAAU,mBAC9C,2BAAOQ,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,qD,GAPGT,IAAMC,WCkBVS,E,iLAfP,OACI,yBAAKX,UAAU,6CACX,qCAAWK,KAAKC,MAAMM,MACtB,wCAAcP,KAAKC,MAAMO,SACzB,kDAAyBR,KAAKC,MAAMQ,aACpC,2CAAqBT,KAAKC,MAAMS,UAChC,uBAAGf,UAAU,uBAAb,iBAAkDK,KAAKC,MAAMU,aAE5DX,KAAKC,MAAMW,OAAS,uBAAGjB,UAAU,eAAeK,KAAKC,MAAMW,Y,GAXtDhB,IAAMC,WCyEbgB,E,YAlEb,WAAaZ,GAAQ,IAAD,8BAClB,4CAAMA,KAYRa,WAboB,uCAaP,WAAOC,GAAP,qBAAAC,EAAA,6DAEXD,EAAEE,iBAEIV,EAAOQ,EAAEG,OAAOC,SAASZ,KAAKa,MAC9BZ,EAAUO,EAAEG,OAAOC,SAASX,QAAQY,MAL/B,SAOWC,MAAM,oDAAD,OAAqDd,EAArD,YAA6DC,EAA7D,4CAPhB,cAOLc,EAPK,gBAQYA,EAAQC,OARpB,OAQLC,EARK,OASXC,QAAQC,IAAIF,GAGTjB,GAAQC,EACT,EAAKmB,SAAS,CACZlB,aAA2C,GAA3Be,EAASI,KAAKC,KAAK,QAAU,EAAG,IAAIC,QAAQ,GAC5DvB,KAAMiB,EAASpB,KACfI,QAASgB,EAASO,IAAIvB,QACtBE,SAAUc,EAASI,KAAKlB,SACxBC,YAAaa,EAASQ,QAAQ,GAAGrB,YACjCC,MAAO,KAGT,EAAKe,SAAS,CACZf,MAAO,+BAvBA,4CAbO,sDAElB,EAAKqB,MAAQ,CACXxB,iBAAayB,EACb3B,UAAM2B,EACN1B,aAAS0B,EACTxB,cAAUwB,EACVvB,iBAAauB,EACbtB,WAAOsB,GARS,E,sEA0ClB,OAEE,yBAAKvC,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wCACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mCACb,kBAAC,EAAD,CAAMO,YAAaF,KAAKc,aACxB,kBAAC,EAAD,CACEL,YAAaT,KAAKiC,MAAMxB,YACxBF,KAAMP,KAAKiC,MAAM1B,KACjBC,QAASR,KAAKiC,MAAMzB,QACpBE,SAAUV,KAAKiC,MAAMvB,SACrBC,YAAaX,KAAKiC,MAAMtB,YACxBC,MAAOZ,KAAKiC,MAAMrB,e,GA1DdhB,IAAMC,WCIJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b7da800.chunk.js","sourcesContent":["import React from 'react';\n\nclass Titles extends React.Component {\n    \n    render () {\n        return (\n            <div>\n                <h1 className='display-2'>Weather App</h1>\n                <p className='font-italic'>Find the weather in your city!</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Titles;","import React from 'react';\n\nclass Form extends React.Component {\n    \n    render () {\n        return (\n            <form onSubmit={this.props.showWeather} className='form-control-lg'>\n                <input type='text' name='city' placeholder='City'/>\n                <input type='text' name='country' placeholder='Country'/>\n                <button>Find Weather</button>\n            </form>\n        );\n    }\n    \n}\n\nexport default Form;","import React from 'react';\n\nclass Weather extends React.Component {\n    \n    render () {\n        return (\n            <div className='weather-info text-white weather-container'>\n                <p>City : {this.props.city}</p>\n                <p>Country : {this.props.country}</p>\n                <p>Temperature &deg;F : {this.props.temperature}</p>\n                <p>Humidity &#37; : {this.props.humidity}</p>\n                <p className='weather-description'>Description : {this.props.description}</p>\n                \n                {this.props.error && <p className='text-danger'>{this.props.error}</p>}\n            </div>\n        );\n    }\n    \n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n  }\n\n  //api call\n  getWeather = async (e) => {\n   \n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=8499ffaf5351f994f5b2404bf8cf3376`);\n    const response = await apiCall.json();\n    console.log(response);\n\n    //to make sure the 'city' and 'country' input fields are filled in\n    if(city && country){\n      this.setState({\n        temperature: (((response.main.temp-273.15)*9/5)+32).toFixed(1), //converting from Kelvin to Fahrenheit\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: ''\n      });\n    }else{\n      this.setState({\n        error: 'Please enter the values...'\n      });\n    };\n  }\n\n  render () {\n    return (\n\n      <div className='container-fluid'>\n        <div className='row'>\n          <div className='col-xl-6 title-container text-center'>\n            <Titles />\n          </div>\n          <div className='col-xl-6 form-weather-container'>\n            <Form showWeather={this.getWeather}/>\n            <Weather \n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}/>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}